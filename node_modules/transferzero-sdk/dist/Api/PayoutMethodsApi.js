"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = void 0;













var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _PayoutMethod = _interopRequireDefault(require("../Model/PayoutMethod"));
var _PayoutMethodListResponse = _interopRequireDefault(require("../Model/PayoutMethodListResponse"));
var _PayoutMethodRequest = _interopRequireDefault(require("../Model/PayoutMethodRequest"));
var _PayoutMethodResponse = _interopRequireDefault(require("../Model/PayoutMethodResponse"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };}function _typeof(o) {"@babel/helpers - typeof";return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {return typeof o;} : function (o) {return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;}, _typeof(o);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function _toPropertyKey(t) {var i = _toPrimitive(t, "string");return "symbol" == _typeof(i) ? i : i + "";}function _toPrimitive(t, r) {if ("object" != _typeof(t) || !t) return t;var e = t[Symbol.toPrimitive];if (void 0 !== e) {var i = e.call(t, r || "default");if ("object" != _typeof(i)) return i;throw new TypeError("@@toPrimitive must return a primitive value.");}return ("string" === r ? String : Number)(t);} /**
 * TransferZero API
 * Reference documentation for the TransferZero API V1
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */ /**
* PayoutMethods service.
* @module Api/PayoutMethodsApi
* @version 1.35.1
*/var PayoutMethodsApi = exports["default"] = /*#__PURE__*/function () {/**
  * Constructs a new PayoutMethodsApi. 
  * @alias module:Api/PayoutMethodsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */function PayoutMethodsApi(apiClient) {_classCallCheck(this, PayoutMethodsApi);this.apiClient = apiClient || _ApiClient["default"].instance;}
  /**
   * Deleting a payout method
   * Deletes a single payout method by the Payout Method ID
   * @param {String} payoutMethodID ID of the payout method to delete.  Example: `/v1/payout_methods/bf9ff782-e182-45ac-abea-5bce83ad6670`
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/PayoutMethodResponse} and HTTP response
   */return _createClass(PayoutMethodsApi, [{ key: "deletePayoutMethodWithHttpInfo", value:
    function deletePayoutMethodWithHttpInfo(payoutMethodID) {
      var postBody = null;
      // verify the required parameter 'payoutMethodID' is set
      if (payoutMethodID === undefined || payoutMethodID === null) {
        throw new Error("Missing the required parameter 'payoutMethodID' when calling deletePayoutMethod");
      }

      var pathParams = {
        'Payout Method ID': payoutMethodID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _PayoutMethodResponse["default"];
      return this.apiClient.callApi(
        '/payout_methods/{Payout Method ID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deleting a payout method
     * Deletes a single payout method by the Payout Method ID
     * @param {String} payoutMethodID ID of the payout method to delete.  Example: `/v1/payout_methods/bf9ff782-e182-45ac-abea-5bce83ad6670`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/PayoutMethodResponse}
     */ }, { key: "deletePayoutMethod", value:
    function deletePayoutMethod(payoutMethodID) {
      return this.deletePayoutMethodWithHttpInfo(payoutMethodID).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    }


    /**
     * Fetching a payout method
     * Show a payout method by id
     * @param {String} payoutMethodID ID of the payout method to get.  Example: `/v1/payout_methods/bf9ff782-e182-45ac-abea-5bce83ad6670`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/PayoutMethodResponse} and HTTP response
     */ }, { key: "getPayoutMethodWithHttpInfo", value:
    function getPayoutMethodWithHttpInfo(payoutMethodID) {
      var postBody = null;
      // verify the required parameter 'payoutMethodID' is set
      if (payoutMethodID === undefined || payoutMethodID === null) {
        throw new Error("Missing the required parameter 'payoutMethodID' when calling getPayoutMethod");
      }

      var pathParams = {
        'Payout Method ID': payoutMethodID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _PayoutMethodResponse["default"];
      return this.apiClient.callApi(
        '/payout_methods/{Payout Method ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetching a payout method
     * Show a payout method by id
     * @param {String} payoutMethodID ID of the payout method to get.  Example: `/v1/payout_methods/bf9ff782-e182-45ac-abea-5bce83ad6670`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/PayoutMethodResponse}
     */ }, { key: "getPayoutMethod", value:
    function getPayoutMethod(payoutMethodID) {
      return this.getPayoutMethodWithHttpInfo(payoutMethodID).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    }


    /**
     * Listing payout methods
     * List available payout methods
     * @param {Object} opts Optional parameters
     * @param {Array.<module:Model/String>} opts.state Allows filtering results by `state` of the payout method.  Example: `/v1/payout_methods?state[]=enabled`
     * @param {Array.<String>} opts.type Allows filtering results by the specified type.  Example: `/v1/payout_methods?type[]=NGN::Bank`
     * @param {String} opts.senderId Allows filtering results by the specified sender id.  Example: `/v1/payout_methods?sender_id=bf9ff782-e182-45ac-abea-5bce83ad6670`
     * @param {Number} opts.page The page number to request (defaults to 1)
     * @param {Number} opts.per The number of results to load per page (defaults to 10)
     * @param {String} opts.createdAtFrom Start date to filter recipients by created_at range Allows filtering results by the specified `created_at` timeframe.  Example: `/v1/recipients?created_at_from=2018-06-06&created_at_to=2018-06-08`
     * @param {String} opts.createdAtTo End date to filter recipients by created_at range Allows filtering results by the specified `created_at` timeframe.  Example: `/v1/recipients?created_at_from=2018-06-06&created_at_to=2018-06-08`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/PayoutMethodListResponse} and HTTP response
     */ }, { key: "getPayoutMethodsWithHttpInfo", value:
    function getPayoutMethodsWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'state': this.apiClient.buildCollectionParam(opts['state'], 'multi'),
        'type': this.apiClient.buildCollectionParam(opts['type'], 'multi'),
        'sender_id': opts['senderId'],
        'page': opts['page'],
        'per': opts['per'],
        'created_at_from': opts['createdAtFrom'],
        'created_at_to': opts['createdAtTo']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _PayoutMethodListResponse["default"];
      return this.apiClient.callApi(
        '/payout_methods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Listing payout methods
     * List available payout methods
     * @param {Object} opts Optional parameters
     * @param {Array.<module:Model/String>} opts.state Allows filtering results by `state` of the payout method.  Example: `/v1/payout_methods?state[]=enabled`
     * @param {Array.<String>} opts.type Allows filtering results by the specified type.  Example: `/v1/payout_methods?type[]=NGN::Bank`
     * @param {String} opts.senderId Allows filtering results by the specified sender id.  Example: `/v1/payout_methods?sender_id=bf9ff782-e182-45ac-abea-5bce83ad6670`
     * @param {Number} opts.page The page number to request (defaults to 1)
     * @param {Number} opts.per The number of results to load per page (defaults to 10)
     * @param {String} opts.createdAtFrom Start date to filter recipients by created_at range Allows filtering results by the specified `created_at` timeframe.  Example: `/v1/recipients?created_at_from=2018-06-06&created_at_to=2018-06-08`
     * @param {String} opts.createdAtTo End date to filter recipients by created_at range Allows filtering results by the specified `created_at` timeframe.  Example: `/v1/recipients?created_at_from=2018-06-06&created_at_to=2018-06-08`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/PayoutMethodListResponse}
     */ }, { key: "getPayoutMethods", value:
    function getPayoutMethods(opts) {
      return this.getPayoutMethodsWithHttpInfo(opts).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    }


    /**
     * Updating a payout method
     * Updates a single payout method by the Payout Method ID
     * @param {String} payoutMethodID ID of the payout method to get.  Example: `/v1/payout_methods/bf9ff782-e182-45ac-abea-5bce83ad6670`
     * @param {module:Model/PayoutMethod} payoutMethod 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/PayoutMethodResponse} and HTTP response
     */ }, { key: "patchPayoutMethodWithHttpInfo", value:
    function patchPayoutMethodWithHttpInfo(payoutMethodID, payoutMethod) {
      var postBody = payoutMethod;
      // verify the required parameter 'payoutMethodID' is set
      if (payoutMethodID === undefined || payoutMethodID === null) {
        throw new Error("Missing the required parameter 'payoutMethodID' when calling patchPayoutMethod");
      }
      // verify the required parameter 'payoutMethod' is set
      if (payoutMethod === undefined || payoutMethod === null) {
        throw new Error("Missing the required parameter 'payoutMethod' when calling patchPayoutMethod");
      }

      var pathParams = {
        'Payout Method ID': payoutMethodID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _PayoutMethodResponse["default"];
      return this.apiClient.callApi(
        '/payout_methods/{Payout Method ID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updating a payout method
     * Updates a single payout method by the Payout Method ID
     * @param {String} payoutMethodID ID of the payout method to get.  Example: `/v1/payout_methods/bf9ff782-e182-45ac-abea-5bce83ad6670`
     * @param {module:Model/PayoutMethod} payoutMethod 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/PayoutMethodResponse}
     */ }, { key: "patchPayoutMethod", value:
    function patchPayoutMethod(payoutMethodID, payoutMethod) {
      return this.patchPayoutMethodWithHttpInfo(payoutMethodID, payoutMethod).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    }


    /**
     * Creating a payout method
     * Creates a new payout method in our system. 
     * @param {module:Model/PayoutMethodRequest} payoutMethodRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/PayoutMethodResponse} and HTTP response
     */ }, { key: "postPayoutMethodsWithHttpInfo", value:
    function postPayoutMethodsWithHttpInfo(payoutMethodRequest) {
      var postBody = payoutMethodRequest;
      // verify the required parameter 'payoutMethodRequest' is set
      if (payoutMethodRequest === undefined || payoutMethodRequest === null) {
        throw new Error("Missing the required parameter 'payoutMethodRequest' when calling postPayoutMethods");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _PayoutMethodResponse["default"];
      return this.apiClient.callApi(
        '/payout_methods', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creating a payout method
     * Creates a new payout method in our system. 
     * @param {module:Model/PayoutMethodRequest} payoutMethodRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/PayoutMethodResponse}
     */ }, { key: "postPayoutMethods", value:
    function postPayoutMethods(payoutMethodRequest) {
      return this.postPayoutMethodsWithHttpInfo(payoutMethodRequest).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    } }]);}();
//# sourceMappingURL=PayoutMethodsApi.js.map