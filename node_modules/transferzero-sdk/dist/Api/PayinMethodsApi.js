"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = void 0;













var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _PayinMethod = _interopRequireDefault(require("../Model/PayinMethod"));
var _PayinMethodResponse = _interopRequireDefault(require("../Model/PayinMethodResponse"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };}function _typeof(o) {"@babel/helpers - typeof";return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {return typeof o;} : function (o) {return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;}, _typeof(o);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function _toPropertyKey(t) {var i = _toPrimitive(t, "string");return "symbol" == _typeof(i) ? i : i + "";}function _toPrimitive(t, r) {if ("object" != _typeof(t) || !t) return t;var e = t[Symbol.toPrimitive];if (void 0 !== e) {var i = e.call(t, r || "default");if ("object" != _typeof(i)) return i;throw new TypeError("@@toPrimitive must return a primitive value.");}return ("string" === r ? String : Number)(t);} /**
 * TransferZero API
 * Reference documentation for the TransferZero API V1
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */ /**
* PayinMethods service.
* @module Api/PayinMethodsApi
* @version 1.35.1
*/var PayinMethodsApi = exports["default"] = /*#__PURE__*/function () {/**
  * Constructs a new PayinMethodsApi. 
  * @alias module:Api/PayinMethodsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */function PayinMethodsApi(apiClient) {_classCallCheck(this, PayinMethodsApi);this.apiClient = apiClient || _ApiClient["default"].instance;}
  /**
   * Deleting a payin method
   * Initiates a cancellation request for the specified payin method
   * @param {String} payinMethodID ID of the payin method to delete.  Example: `/v1/payin_methods/bf9ff782-e182-45ac-abea-5bce83ad6670`
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/PayinMethodResponse} and HTTP response
   */return _createClass(PayinMethodsApi, [{ key: "deletePayinMethodWithHttpInfo", value:
    function deletePayinMethodWithHttpInfo(payinMethodID) {
      var postBody = null;
      // verify the required parameter 'payinMethodID' is set
      if (payinMethodID === undefined || payinMethodID === null) {
        throw new Error("Missing the required parameter 'payinMethodID' when calling deletePayinMethod");
      }

      var pathParams = {
        'PayinMethod ID': payinMethodID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _PayinMethodResponse["default"];
      return this.apiClient.callApi(
        '/payin_methods/{PayinMethod ID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deleting a payin method
     * Initiates a cancellation request for the specified payin method
     * @param {String} payinMethodID ID of the payin method to delete.  Example: `/v1/payin_methods/bf9ff782-e182-45ac-abea-5bce83ad6670`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/PayinMethodResponse}
     */ }, { key: "deletePayinMethod", value:
    function deletePayinMethod(payinMethodID) {
      return this.deletePayinMethodWithHttpInfo(payinMethodID).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    }


    /**
     * Fetching a payin method
     * Show a payin method by id
     * @param {String} payinMethodID ID of the payin method to get.  Example: `/v1/payin_methods/bf9ff782-e182-45ac-abea-5bce83ad6670`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/PayinMethodResponse} and HTTP response
     */ }, { key: "getPayinMethodWithHttpInfo", value:
    function getPayinMethodWithHttpInfo(payinMethodID) {
      var postBody = null;
      // verify the required parameter 'payinMethodID' is set
      if (payinMethodID === undefined || payinMethodID === null) {
        throw new Error("Missing the required parameter 'payinMethodID' when calling getPayinMethod");
      }

      var pathParams = {
        'PayinMethod ID': payinMethodID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _PayinMethodResponse["default"];
      return this.apiClient.callApi(
        '/payin_methods/{PayinMethod ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetching a payin method
     * Show a payin method by id
     * @param {String} payinMethodID ID of the payin method to get.  Example: `/v1/payin_methods/bf9ff782-e182-45ac-abea-5bce83ad6670`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/PayinMethodResponse}
     */ }, { key: "getPayinMethod", value:
    function getPayinMethod(payinMethodID) {
      return this.getPayinMethodWithHttpInfo(payinMethodID).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    }


    /**
     * Updating a payin method
     * Updates a single payin method by the Payin Method ID
     * @param {String} payinMethodID ID of the payin method to get.  Example: `/v1/payin_methods/bf9ff782-e182-45ac-abea-5bce83ad6670`
     * @param {module:Model/PayinMethod} payinMethod 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/PayinMethodResponse} and HTTP response
     */ }, { key: "patchPayinMethodWithHttpInfo", value:
    function patchPayinMethodWithHttpInfo(payinMethodID, payinMethod) {
      var postBody = payinMethod;
      // verify the required parameter 'payinMethodID' is set
      if (payinMethodID === undefined || payinMethodID === null) {
        throw new Error("Missing the required parameter 'payinMethodID' when calling patchPayinMethod");
      }
      // verify the required parameter 'payinMethod' is set
      if (payinMethod === undefined || payinMethod === null) {
        throw new Error("Missing the required parameter 'payinMethod' when calling patchPayinMethod");
      }

      var pathParams = {
        'PayinMethod ID': payinMethodID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _PayinMethodResponse["default"];
      return this.apiClient.callApi(
        '/payin_methods/{PayinMethod ID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updating a payin method
     * Updates a single payin method by the Payin Method ID
     * @param {String} payinMethodID ID of the payin method to get.  Example: `/v1/payin_methods/bf9ff782-e182-45ac-abea-5bce83ad6670`
     * @param {module:Model/PayinMethod} payinMethod 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/PayinMethodResponse}
     */ }, { key: "patchPayinMethod", value:
    function patchPayinMethod(payinMethodID, payinMethod) {
      return this.patchPayinMethodWithHttpInfo(payinMethodID, payinMethod).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    }


    /**
     * Retries PayinMethod
     * Retries the collection process for the payin method.  Please note only payin methods in `error` state can be retried.
     * @param {String} payinMethodID ID of the payin method whose collection process should be retried  Example: `/v1/payin_methods/9d4d7b73-a94c-4979-ab57-09074fd55d33/retry`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/PayinMethodResponse} and HTTP response
     */ }, { key: "retryPayinMethodWithHttpInfo", value:
    function retryPayinMethodWithHttpInfo(payinMethodID) {
      var postBody = null;
      // verify the required parameter 'payinMethodID' is set
      if (payinMethodID === undefined || payinMethodID === null) {
        throw new Error("Missing the required parameter 'payinMethodID' when calling retryPayinMethod");
      }

      var pathParams = {
        'PayinMethod ID': payinMethodID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _PayinMethodResponse["default"];
      return this.apiClient.callApi(
        '/payin_methods/{PayinMethod ID}/retry', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retries PayinMethod
     * Retries the collection process for the payin method.  Please note only payin methods in `error` state can be retried.
     * @param {String} payinMethodID ID of the payin method whose collection process should be retried  Example: `/v1/payin_methods/9d4d7b73-a94c-4979-ab57-09074fd55d33/retry`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/PayinMethodResponse}
     */ }, { key: "retryPayinMethod", value:
    function retryPayinMethod(payinMethodID) {
      return this.retryPayinMethodWithHttpInfo(payinMethodID).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    } }]);}();
//# sourceMappingURL=PayinMethodsApi.js.map