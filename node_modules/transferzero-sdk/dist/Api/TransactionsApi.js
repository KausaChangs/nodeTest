"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = void 0;













var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _ErrorStatus = _interopRequireDefault(require("../Model/ErrorStatus"));
var _PayinMethodRequest = _interopRequireDefault(require("../Model/PayinMethodRequest"));
var _TransactionListResponse = _interopRequireDefault(require("../Model/TransactionListResponse"));
var _TransactionRequest = _interopRequireDefault(require("../Model/TransactionRequest"));
var _TransactionResponse = _interopRequireDefault(require("../Model/TransactionResponse"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };}function _typeof(o) {"@babel/helpers - typeof";return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {return typeof o;} : function (o) {return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;}, _typeof(o);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function _toPropertyKey(t) {var i = _toPrimitive(t, "string");return "symbol" == _typeof(i) ? i : i + "";}function _toPrimitive(t, r) {if ("object" != _typeof(t) || !t) return t;var e = t[Symbol.toPrimitive];if (void 0 !== e) {var i = e.call(t, r || "default");if ("object" != _typeof(i)) return i;throw new TypeError("@@toPrimitive must return a primitive value.");}return ("string" === r ? String : Number)(t);} /**
 * TransferZero API
 * Reference documentation for the TransferZero API V1
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */ /**
* Transactions service.
* @module Api/TransactionsApi
* @version 1.35.1
*/var TransactionsApi = exports["default"] = /*#__PURE__*/function () {/**
  * Constructs a new TransactionsApi. 
  * @alias module:Api/TransactionsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */function TransactionsApi(apiClient) {_classCallCheck(this, TransactionsApi);this.apiClient = apiClient || _ApiClient["default"].instance;}
  /**
   * Calculates transaction amounts for a transaction payload
   * Calculates the input, output and fee amounts for the recipients in a transaction payload
   * @param {module:Model/TransactionRequest} transactionRequest 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/TransactionResponse} and HTTP response
   */return _createClass(TransactionsApi, [{ key: "calculateTransactionsWithHttpInfo", value:
    function calculateTransactionsWithHttpInfo(transactionRequest) {
      var postBody = transactionRequest;
      // verify the required parameter 'transactionRequest' is set
      if (transactionRequest === undefined || transactionRequest === null) {
        throw new Error("Missing the required parameter 'transactionRequest' when calling calculateTransactions");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _TransactionResponse["default"];
      return this.apiClient.callApi(
        '/transactions/calculate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Calculates transaction amounts for a transaction payload
     * Calculates the input, output and fee amounts for the recipients in a transaction payload
     * @param {module:Model/TransactionRequest} transactionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/TransactionResponse}
     */ }, { key: "calculateTransactions", value:
    function calculateTransactions(transactionRequest) {
      return this.calculateTransactionsWithHttpInfo(transactionRequest).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    }


    /**
     * Creates a new transaction and funds it from account balance
     * This endpoint creates a transaction and funds it from an account balance. You must ensure that you have established an account with us in the pay-in currency of the transactions you wish to create, and that this account is sufficently funded, before calling this endpoint.  Note that the <pre>external_id</pre> field is required for requests to this endpoint.
     * @param {module:Model/TransactionRequest} transactionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/TransactionResponse} and HTTP response
     */ }, { key: "createAndFundTransactionWithHttpInfo", value:
    function createAndFundTransactionWithHttpInfo(transactionRequest) {
      var postBody = transactionRequest;
      // verify the required parameter 'transactionRequest' is set
      if (transactionRequest === undefined || transactionRequest === null) {
        throw new Error("Missing the required parameter 'transactionRequest' when calling createAndFundTransaction");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _TransactionResponse["default"];
      return this.apiClient.callApi(
        '/transactions/create_and_fund', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a new transaction and funds it from account balance
     * This endpoint creates a transaction and funds it from an account balance. You must ensure that you have established an account with us in the pay-in currency of the transactions you wish to create, and that this account is sufficently funded, before calling this endpoint.  Note that the <pre>external_id</pre> field is required for requests to this endpoint.
     * @param {module:Model/TransactionRequest} transactionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/TransactionResponse}
     */ }, { key: "createAndFundTransaction", value:
    function createAndFundTransaction(transactionRequest) {
      return this.createAndFundTransactionWithHttpInfo(transactionRequest).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    }


    /**
     * Fetch a single transaction
     * Finds and returns a Transaction created by the requesting API key, using the provided Transaction ID.
     * @param {String} transactionID ID of the transaction.  Example: `/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/TransactionResponse} and HTTP response
     */ }, { key: "getTransactionWithHttpInfo", value:
    function getTransactionWithHttpInfo(transactionID) {
      var postBody = null;
      // verify the required parameter 'transactionID' is set
      if (transactionID === undefined || transactionID === null) {
        throw new Error("Missing the required parameter 'transactionID' when calling getTransaction");
      }

      var pathParams = {
        'Transaction ID': transactionID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _TransactionResponse["default"];
      return this.apiClient.callApi(
        '/transactions/{Transaction ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetch a single transaction
     * Finds and returns a Transaction created by the requesting API key, using the provided Transaction ID.
     * @param {String} transactionID ID of the transaction.  Example: `/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/TransactionResponse}
     */ }, { key: "getTransaction", value:
    function getTransaction(transactionID) {
      return this.getTransactionWithHttpInfo(transactionID).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    }


    /**
     * Get a list of transactions
     * Retrieves a paginated list of the Transactions created by your API key.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page number to request (defaults to 1)
     * @param {Number} opts.per The number of results to load per page (defaults to 10)
     * @param {String} opts.externalId Allows filtering results by `external_id`.  Example: `/v1/senders?external_id=26ec8517-2f0d-48c0-b74f-0bccb9ab3a87`
     * @param {String} opts.senderId Allows filtering results by `sender_id`.  Example: `/v1/transactions?sender_id=b41d3cb7-6c54-4245-85fc-8e30690eb0f7`
     * @param {module:Model/String} opts.transactionsType Allows filtering results by `transactions_type`.  Example: `/v1/transactions?transactions_type=automated`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/TransactionListResponse} and HTTP response
     */ }, { key: "getTransactionsWithHttpInfo", value:
    function getTransactionsWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per': opts['per'],
        'external_id': opts['externalId'],
        'sender_id': opts['senderId'],
        'transactions_type': opts['transactionsType']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _TransactionListResponse["default"];
      return this.apiClient.callApi(
        '/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a list of transactions
     * Retrieves a paginated list of the Transactions created by your API key.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page number to request (defaults to 1)
     * @param {Number} opts.per The number of results to load per page (defaults to 10)
     * @param {String} opts.externalId Allows filtering results by `external_id`.  Example: `/v1/senders?external_id=26ec8517-2f0d-48c0-b74f-0bccb9ab3a87`
     * @param {String} opts.senderId Allows filtering results by `sender_id`.  Example: `/v1/transactions?sender_id=b41d3cb7-6c54-4245-85fc-8e30690eb0f7`
     * @param {module:Model/String} opts.transactionsType Allows filtering results by `transactions_type`.  Example: `/v1/transactions?transactions_type=automated`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/TransactionListResponse}
     */ }, { key: "getTransactions", value:
    function getTransactions(opts) {
      return this.getTransactionsWithHttpInfo(opts).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    }


    /**
     * Creates a fake payin for transaction
     * This method is available only in sandbox environment and is supposed to be used only for testing integration. It allows you to emulate a payin without paying actual money. 
     * @param {String} transactionID ID of the transaction to payin.  Example: `/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payin`
     * @param {module:Model/PayinMethodRequest} payinMethodRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/TransactionResponse} and HTTP response
     */ }, { key: "payinTransactionWithHttpInfo", value:
    function payinTransactionWithHttpInfo(transactionID, payinMethodRequest) {
      var postBody = payinMethodRequest;
      // verify the required parameter 'transactionID' is set
      if (transactionID === undefined || transactionID === null) {
        throw new Error("Missing the required parameter 'transactionID' when calling payinTransaction");
      }
      // verify the required parameter 'payinMethodRequest' is set
      if (payinMethodRequest === undefined || payinMethodRequest === null) {
        throw new Error("Missing the required parameter 'payinMethodRequest' when calling payinTransaction");
      }

      var pathParams = {
        'Transaction ID': transactionID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _TransactionResponse["default"];
      return this.apiClient.callApi(
        '/transactions/{Transaction ID}/payin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a fake payin for transaction
     * This method is available only in sandbox environment and is supposed to be used only for testing integration. It allows you to emulate a payin without paying actual money. 
     * @param {String} transactionID ID of the transaction to payin.  Example: `/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payin`
     * @param {module:Model/PayinMethodRequest} payinMethodRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/TransactionResponse}
     */ }, { key: "payinTransaction", value:
    function payinTransaction(transactionID, payinMethodRequest) {
      return this.payinTransactionWithHttpInfo(transactionID, payinMethodRequest).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    }


    /**
     * Creates a fake payout for transaction
     * This method is available only in sandbox environment and is supposed to be used only for testing. It allows you to emulate the payout of a transaction after payin. 
     * @param {String} transactionID ID of the transaction to payout.  Example: `/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payout`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/TransactionResponse} and HTTP response
     */ }, { key: "payoutTransactionWithHttpInfo", value:
    function payoutTransactionWithHttpInfo(transactionID) {
      var postBody = null;
      // verify the required parameter 'transactionID' is set
      if (transactionID === undefined || transactionID === null) {
        throw new Error("Missing the required parameter 'transactionID' when calling payoutTransaction");
      }

      var pathParams = {
        'Transaction ID': transactionID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _TransactionResponse["default"];
      return this.apiClient.callApi(
        '/transactions/{Transaction ID}/payout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a fake payout for transaction
     * This method is available only in sandbox environment and is supposed to be used only for testing. It allows you to emulate the payout of a transaction after payin. 
     * @param {String} transactionID ID of the transaction to payout.  Example: `/v1/transactions/bf9ff782-e182-45ac-abea-5bce83ad6670/payout`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/TransactionResponse}
     */ }, { key: "payoutTransaction", value:
    function payoutTransaction(transactionID) {
      return this.payoutTransactionWithHttpInfo(transactionID).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    }


    /**
     * Creates a new transaction
     * Transactions are the main objects in the TransferZero API, so it's important to understand how to create and manage them. Transactions facilitate money movement from one Sender in a specific currency to one or multiple Recipients in another currency.  The main flow of a successful transaction flow is the following - - Transaction is created linking the Sender to the Recipient(s) with the requested amounts. - Once the sender is KYC'd and approved the transaction can be funded. - Once the transaction is funded, we will initiate the payout to the recipient(s). - After the recipient (or all recipients) has received the money, the transaction is finished.
     * @param {module:Model/TransactionRequest} transactionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/TransactionResponse} and HTTP response
     */ }, { key: "postTransactionsWithHttpInfo", value:
    function postTransactionsWithHttpInfo(transactionRequest) {
      var postBody = transactionRequest;
      // verify the required parameter 'transactionRequest' is set
      if (transactionRequest === undefined || transactionRequest === null) {
        throw new Error("Missing the required parameter 'transactionRequest' when calling postTransactions");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _TransactionResponse["default"];
      return this.apiClient.callApi(
        '/transactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a new transaction
     * Transactions are the main objects in the TransferZero API, so it's important to understand how to create and manage them. Transactions facilitate money movement from one Sender in a specific currency to one or multiple Recipients in another currency.  The main flow of a successful transaction flow is the following - - Transaction is created linking the Sender to the Recipient(s) with the requested amounts. - Once the sender is KYC'd and approved the transaction can be funded. - Once the transaction is funded, we will initiate the payout to the recipient(s). - After the recipient (or all recipients) has received the money, the transaction is finished.
     * @param {module:Model/TransactionRequest} transactionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/TransactionResponse}
     */ }, { key: "postTransactions", value:
    function postTransactions(transactionRequest) {
      return this.postTransactionsWithHttpInfo(transactionRequest).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    }


    /**
     * Validates a transaction payload
     * Validates fields in a transaction payload and displays invalid or missing fields
     * @param {module:Model/TransactionRequest} transactionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/TransactionResponse} and HTTP response
     */ }, { key: "validateTransactionsWithHttpInfo", value:
    function validateTransactionsWithHttpInfo(transactionRequest) {
      var postBody = transactionRequest;
      // verify the required parameter 'transactionRequest' is set
      if (transactionRequest === undefined || transactionRequest === null) {
        throw new Error("Missing the required parameter 'transactionRequest' when calling validateTransactions");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _TransactionResponse["default"];
      return this.apiClient.callApi(
        '/transactions/validate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Validates a transaction payload
     * Validates fields in a transaction payload and displays invalid or missing fields
     * @param {module:Model/TransactionRequest} transactionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/TransactionResponse}
     */ }, { key: "validateTransactions", value:
    function validateTransactions(transactionRequest) {
      return this.validateTransactionsWithHttpInfo(transactionRequest).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    } }]);}();
//# sourceMappingURL=TransactionsApi.js.map