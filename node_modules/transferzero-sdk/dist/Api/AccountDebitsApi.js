"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = void 0;













var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _DebitListResponse = _interopRequireDefault(require("../Model/DebitListResponse"));
var _DebitRequestWrapper = _interopRequireDefault(require("../Model/DebitRequestWrapper"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };}function _typeof(o) {"@babel/helpers - typeof";return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {return typeof o;} : function (o) {return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;}, _typeof(o);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function _toPropertyKey(t) {var i = _toPrimitive(t, "string");return "symbol" == _typeof(i) ? i : i + "";}function _toPrimitive(t, r) {if ("object" != _typeof(t) || !t) return t;var e = t[Symbol.toPrimitive];if (void 0 !== e) {var i = e.call(t, r || "default");if ("object" != _typeof(i)) return i;throw new TypeError("@@toPrimitive must return a primitive value.");}return ("string" === r ? String : Number)(t);} /**
 * TransferZero API
 * Reference documentation for the TransferZero API V1
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */ /**
* AccountDebits service.
* @module Api/AccountDebitsApi
* @version 1.35.1
*/var AccountDebitsApi = exports["default"] = /*#__PURE__*/function () {/**
  * Constructs a new AccountDebitsApi. 
  * @alias module:Api/AccountDebitsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */function AccountDebitsApi(apiClient) {_classCallCheck(this, AccountDebitsApi);this.apiClient = apiClient || _ApiClient["default"].instance;}
  /**
   * Creating an account debit
   * Creates a new account debit finding transaction through the internal balance  To successfully fund a transaction - - The currency needs to be the same as the input_currency on the transaction - The amount has to be the same as the input_amount on the transaction - The to_id is the id of the transaction - You need to have enough balance of the appropriate currency inside your wallet  Once the transaction is funded, we will immediately start trying to pay out the recipient(s).  It is also possible to create multiple account debits by supplying an array of debit objects 
   * @param {module:Model/DebitRequestWrapper} debitRequestWrapper 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/DebitListResponse} and HTTP response
   */return _createClass(AccountDebitsApi, [{ key: "postAccountsDebitsWithHttpInfo", value:
    function postAccountsDebitsWithHttpInfo(debitRequestWrapper) {
      var postBody = debitRequestWrapper;
      // verify the required parameter 'debitRequestWrapper' is set
      if (debitRequestWrapper === undefined || debitRequestWrapper === null) {
        throw new Error("Missing the required parameter 'debitRequestWrapper' when calling postAccountsDebits");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _DebitListResponse["default"];
      return this.apiClient.callApi(
        '/accounts/debits', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creating an account debit
     * Creates a new account debit finding transaction through the internal balance  To successfully fund a transaction - - The currency needs to be the same as the input_currency on the transaction - The amount has to be the same as the input_amount on the transaction - The to_id is the id of the transaction - You need to have enough balance of the appropriate currency inside your wallet  Once the transaction is funded, we will immediately start trying to pay out the recipient(s).  It is also possible to create multiple account debits by supplying an array of debit objects 
     * @param {module:Model/DebitRequestWrapper} debitRequestWrapper 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/DebitListResponse}
     */ }, { key: "postAccountsDebits", value:
    function postAccountsDebits(debitRequestWrapper) {
      return this.postAccountsDebitsWithHttpInfo(debitRequestWrapper).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    } }]);}();
//# sourceMappingURL=AccountDebitsApi.js.map