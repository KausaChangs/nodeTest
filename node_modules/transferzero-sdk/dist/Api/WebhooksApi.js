"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = void 0;













var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _WebhookDefinitionEventListResponse = _interopRequireDefault(require("../Model/WebhookDefinitionEventListResponse"));
var _WebhookDefinitionListResponse = _interopRequireDefault(require("../Model/WebhookDefinitionListResponse"));
var _WebhookDefinitionRequest = _interopRequireDefault(require("../Model/WebhookDefinitionRequest"));
var _WebhookDefinitionResponse = _interopRequireDefault(require("../Model/WebhookDefinitionResponse"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };}function _typeof(o) {"@babel/helpers - typeof";return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {return typeof o;} : function (o) {return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;}, _typeof(o);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function _toPropertyKey(t) {var i = _toPrimitive(t, "string");return "symbol" == _typeof(i) ? i : i + "";}function _toPrimitive(t, r) {if ("object" != _typeof(t) || !t) return t;var e = t[Symbol.toPrimitive];if (void 0 !== e) {var i = e.call(t, r || "default");if ("object" != _typeof(i)) return i;throw new TypeError("@@toPrimitive must return a primitive value.");}return ("string" === r ? String : Number)(t);} /**
 * TransferZero API
 * Reference documentation for the TransferZero API V1
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */ /**
* Webhooks service.
* @module Api/WebhooksApi
* @version 1.35.1
*/var WebhooksApi = exports["default"] = /*#__PURE__*/function () {/**
  * Constructs a new WebhooksApi. 
  * @alias module:Api/WebhooksApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */function WebhooksApi(apiClient) {_classCallCheck(this, WebhooksApi);this.apiClient = apiClient || _ApiClient["default"].instance;}
  /**
   * Unsubscribing from a webhook
   * Unsubscribes from a webhook specified
   * @param {String} webhookID The ID of webhook to cancel.  Example: `/v1/webhooks/9d4d7b73-a94c-4979-ab57-09074fd55d33`
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/WebhookDefinitionResponse} and HTTP response
   */return _createClass(WebhooksApi, [{ key: "deleteWebhookWithHttpInfo", value:
    function deleteWebhookWithHttpInfo(webhookID) {
      var postBody = null;
      // verify the required parameter 'webhookID' is set
      if (webhookID === undefined || webhookID === null) {
        throw new Error("Missing the required parameter 'webhookID' when calling deleteWebhook");
      }

      var pathParams = {
        'Webhook ID': webhookID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _WebhookDefinitionResponse["default"];
      return this.apiClient.callApi(
        '/webhooks/{Webhook ID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Unsubscribing from a webhook
     * Unsubscribes from a webhook specified
     * @param {String} webhookID The ID of webhook to cancel.  Example: `/v1/webhooks/9d4d7b73-a94c-4979-ab57-09074fd55d33`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/WebhookDefinitionResponse}
     */ }, { key: "deleteWebhook", value:
    function deleteWebhook(webhookID) {
      return this.deleteWebhookWithHttpInfo(webhookID).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    }


    /**
     * Find a webhook's details
     * Look up a webhook's details with its ID
     * @param {String} webhookID The ID of the Webhook to look up  Example: `/v1/webhooks/9d4d7b73-a94c-4979-ab57-09074fd55d33`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/WebhookDefinitionResponse} and HTTP response
     */ }, { key: "getWebhookWithHttpInfo", value:
    function getWebhookWithHttpInfo(webhookID) {
      var postBody = null;
      // verify the required parameter 'webhookID' is set
      if (webhookID === undefined || webhookID === null) {
        throw new Error("Missing the required parameter 'webhookID' when calling getWebhook");
      }

      var pathParams = {
        'Webhook ID': webhookID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _WebhookDefinitionResponse["default"];
      return this.apiClient.callApi(
        '/webhooks/{Webhook ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Find a webhook's details
     * Look up a webhook's details with its ID
     * @param {String} webhookID The ID of the Webhook to look up  Example: `/v1/webhooks/9d4d7b73-a94c-4979-ab57-09074fd55d33`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/WebhookDefinitionResponse}
     */ }, { key: "getWebhook", value:
    function getWebhook(webhookID) {
      return this.getWebhookWithHttpInfo(webhookID).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    }


    /**
     * Find possible webhook events
     * Fetching possible webhook events
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/WebhookDefinitionEventListResponse} and HTTP response
     */ }, { key: "getWebhookEventsWithHttpInfo", value:
    function getWebhookEventsWithHttpInfo() {
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _WebhookDefinitionEventListResponse["default"];
      return this.apiClient.callApi(
        '/webhooks/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Find possible webhook events
     * Fetching possible webhook events
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/WebhookDefinitionEventListResponse}
     */ }, { key: "getWebhookEvents", value:
    function getWebhookEvents() {
      return this.getWebhookEventsWithHttpInfo().
      then(function (response_and_data) {
        return response_and_data.data;
      });
    }


    /**
     * Listing webhooks
     * Get a list of created webhooks
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page number to request (defaults to 1)
     * @param {Number} opts.per The number of results to load per page (defaults to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/WebhookDefinitionListResponse} and HTTP response
     */ }, { key: "getWebhooksWithHttpInfo", value:
    function getWebhooksWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per': opts['per']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _WebhookDefinitionListResponse["default"];
      return this.apiClient.callApi(
        '/webhooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Listing webhooks
     * Get a list of created webhooks
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page number to request (defaults to 1)
     * @param {Number} opts.per The number of results to load per page (defaults to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/WebhookDefinitionListResponse}
     */ }, { key: "getWebhooks", value:
    function getWebhooks(opts) {
      return this.getWebhooksWithHttpInfo(opts).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    }


    /**
     * Creating a webhook
     * Creates a new webhook, subscribing the provided endpoint to the specified event(s) 
     * @param {module:Model/WebhookDefinitionRequest} webhookDefinitionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/WebhookDefinitionResponse} and HTTP response
     */ }, { key: "postWebhooksWithHttpInfo", value:
    function postWebhooksWithHttpInfo(webhookDefinitionRequest) {
      var postBody = webhookDefinitionRequest;
      // verify the required parameter 'webhookDefinitionRequest' is set
      if (webhookDefinitionRequest === undefined || webhookDefinitionRequest === null) {
        throw new Error("Missing the required parameter 'webhookDefinitionRequest' when calling postWebhooks");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _WebhookDefinitionResponse["default"];
      return this.apiClient.callApi(
        '/webhooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creating a webhook
     * Creates a new webhook, subscribing the provided endpoint to the specified event(s) 
     * @param {module:Model/WebhookDefinitionRequest} webhookDefinitionRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/WebhookDefinitionResponse}
     */ }, { key: "postWebhooks", value:
    function postWebhooks(webhookDefinitionRequest) {
      return this.postWebhooksWithHttpInfo(webhookDefinitionRequest).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    } }]);}();
//# sourceMappingURL=WebhooksApi.js.map