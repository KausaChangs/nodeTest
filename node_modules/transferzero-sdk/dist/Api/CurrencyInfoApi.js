"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = void 0;













var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _CurrencyExchangeListResponse = _interopRequireDefault(require("../Model/CurrencyExchangeListResponse"));
var _CurrencyListResponse = _interopRequireDefault(require("../Model/CurrencyListResponse"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };}function _typeof(o) {"@babel/helpers - typeof";return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {return typeof o;} : function (o) {return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;}, _typeof(o);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function _toPropertyKey(t) {var i = _toPrimitive(t, "string");return "symbol" == _typeof(i) ? i : i + "";}function _toPrimitive(t, r) {if ("object" != _typeof(t) || !t) return t;var e = t[Symbol.toPrimitive];if (void 0 !== e) {var i = e.call(t, r || "default");if ("object" != _typeof(i)) return i;throw new TypeError("@@toPrimitive must return a primitive value.");}return ("string" === r ? String : Number)(t);} /**
 * TransferZero API
 * Reference documentation for the TransferZero API V1
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */ /**
* CurrencyInfo service.
* @module Api/CurrencyInfoApi
* @version 1.35.1
*/var CurrencyInfoApi = exports["default"] = /*#__PURE__*/function () {/**
  * Constructs a new CurrencyInfoApi. 
  * @alias module:Api/CurrencyInfoApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */function CurrencyInfoApi(apiClient) {_classCallCheck(this, CurrencyInfoApi);this.apiClient = apiClient || _ApiClient["default"].instance;}
  /**
   * Getting a list of possible requested currencies
   * Fetches a list of currencies available to use in other API requests. Usually the 3-character alpha ISO 4217 currency code (eg. USD) is used as the identifier.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/CurrencyListResponse} and HTTP response
   */return _createClass(CurrencyInfoApi, [{ key: "infoCurrenciesWithHttpInfo", value:
    function infoCurrenciesWithHttpInfo() {
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _CurrencyListResponse["default"];
      return this.apiClient.callApi(
        '/info/currencies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Getting a list of possible requested currencies
     * Fetches a list of currencies available to use in other API requests. Usually the 3-character alpha ISO 4217 currency code (eg. USD) is used as the identifier.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/CurrencyListResponse}
     */ }, { key: "infoCurrencies", value:
    function infoCurrencies() {
      return this.infoCurrenciesWithHttpInfo().
      then(function (response_and_data) {
        return response_and_data.data;
      });
    }


    /**
     * Getting a list of possible input currencies
     * Fetches a list of currencies available to use as the input currency in other API requests. Usually the 3-character alpha ISO 4217 currency code (eg. USD) is used as the identifier. Use this endpoint to determine the current exchange rate from a specific input currency to any output currency that's available. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.senderId Allows the scoping of the results by `sender_id` (optional).  Example: `/v1/info/currencies/in?sender_id=26ec8517-2f0d-48c0-b74f-0bccb9ab3a87`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/CurrencyExchangeListResponse} and HTTP response
     */ }, { key: "infoCurrenciesInWithHttpInfo", value:
    function infoCurrenciesInWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'sender_id': opts['senderId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _CurrencyExchangeListResponse["default"];
      return this.apiClient.callApi(
        '/info/currencies/in', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Getting a list of possible input currencies
     * Fetches a list of currencies available to use as the input currency in other API requests. Usually the 3-character alpha ISO 4217 currency code (eg. USD) is used as the identifier. Use this endpoint to determine the current exchange rate from a specific input currency to any output currency that's available. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.senderId Allows the scoping of the results by `sender_id` (optional).  Example: `/v1/info/currencies/in?sender_id=26ec8517-2f0d-48c0-b74f-0bccb9ab3a87`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/CurrencyExchangeListResponse}
     */ }, { key: "infoCurrenciesIn", value:
    function infoCurrenciesIn(opts) {
      return this.infoCurrenciesInWithHttpInfo(opts).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    }


    /**
     * Getting a list of possible output currencies
     * Fetches a list of currencies available to use as the output currency and their exchange rates against the available input currencies. Usually the 3-character alpha ISO 4217 currency code (eg. USD) is used as the identifier. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.senderId Allows the scoping of the results by `sender_id` (optional).  Example: `/v1/info/currencies/out?sender_id=26ec8517-2f0d-48c0-b74f-0bccb9ab3a87`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/CurrencyExchangeListResponse} and HTTP response
     */ }, { key: "infoCurrenciesOutWithHttpInfo", value:
    function infoCurrenciesOutWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'sender_id': opts['senderId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _CurrencyExchangeListResponse["default"];
      return this.apiClient.callApi(
        '/info/currencies/out', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Getting a list of possible output currencies
     * Fetches a list of currencies available to use as the output currency and their exchange rates against the available input currencies. Usually the 3-character alpha ISO 4217 currency code (eg. USD) is used as the identifier. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.senderId Allows the scoping of the results by `sender_id` (optional).  Example: `/v1/info/currencies/out?sender_id=26ec8517-2f0d-48c0-b74f-0bccb9ab3a87`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/CurrencyExchangeListResponse}
     */ }, { key: "infoCurrenciesOut", value:
    function infoCurrenciesOut(opts) {
      return this.infoCurrenciesOutWithHttpInfo(opts).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    } }]);}();
//# sourceMappingURL=CurrencyInfoApi.js.map