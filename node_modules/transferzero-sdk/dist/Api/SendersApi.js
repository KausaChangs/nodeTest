"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = void 0;













var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _SenderListResponse = _interopRequireDefault(require("../Model/SenderListResponse"));
var _SenderRequest = _interopRequireDefault(require("../Model/SenderRequest"));
var _SenderResponse = _interopRequireDefault(require("../Model/SenderResponse"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };}function _typeof(o) {"@babel/helpers - typeof";return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {return typeof o;} : function (o) {return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;}, _typeof(o);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function _toPropertyKey(t) {var i = _toPrimitive(t, "string");return "symbol" == _typeof(i) ? i : i + "";}function _toPrimitive(t, r) {if ("object" != _typeof(t) || !t) return t;var e = t[Symbol.toPrimitive];if (void 0 !== e) {var i = e.call(t, r || "default");if ("object" != _typeof(i)) return i;throw new TypeError("@@toPrimitive must return a primitive value.");}return ("string" === r ? String : Number)(t);} /**
 * TransferZero API
 * Reference documentation for the TransferZero API V1
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */ /**
* Senders service.
* @module Api/SendersApi
* @version 1.35.1
*/var SendersApi = exports["default"] = /*#__PURE__*/function () {/**
  * Constructs a new SendersApi. 
  * @alias module:Api/SendersApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */function SendersApi(apiClient) {_classCallCheck(this, SendersApi);this.apiClient = apiClient || _ApiClient["default"].instance;}
  /**
   * Deleting a sender
   * Deletes a single sender by the Sender ID
   * @param {String} senderID ID of the sender to delete.  Example: `/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670`
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/SenderResponse} and HTTP response
   */return _createClass(SendersApi, [{ key: "deleteSenderWithHttpInfo", value:
    function deleteSenderWithHttpInfo(senderID) {
      var postBody = null;
      // verify the required parameter 'senderID' is set
      if (senderID === undefined || senderID === null) {
        throw new Error("Missing the required parameter 'senderID' when calling deleteSender");
      }

      var pathParams = {
        'Sender ID': senderID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _SenderResponse["default"];
      return this.apiClient.callApi(
        '/senders/{Sender ID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deleting a sender
     * Deletes a single sender by the Sender ID
     * @param {String} senderID ID of the sender to delete.  Example: `/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/SenderResponse}
     */ }, { key: "deleteSender", value:
    function deleteSender(senderID) {
      return this.deleteSenderWithHttpInfo(senderID).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    }


    /**
     * Fetching a sender
     * Returns a single sender by the Sender ID
     * @param {String} senderID ID of the sender to get.  Example: `/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/SenderResponse} and HTTP response
     */ }, { key: "getSenderWithHttpInfo", value:
    function getSenderWithHttpInfo(senderID) {
      var postBody = null;
      // verify the required parameter 'senderID' is set
      if (senderID === undefined || senderID === null) {
        throw new Error("Missing the required parameter 'senderID' when calling getSender");
      }

      var pathParams = {
        'Sender ID': senderID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _SenderResponse["default"];
      return this.apiClient.callApi(
        '/senders/{Sender ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetching a sender
     * Returns a single sender by the Sender ID
     * @param {String} senderID ID of the sender to get.  Example: `/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/SenderResponse}
     */ }, { key: "getSender", value:
    function getSender(senderID) {
      return this.getSenderWithHttpInfo(senderID).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    }


    /**
     * Listing senders
     * Get a list of available senders
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page number to request (defaults to 1)
     * @param {Number} opts.per The number of results to load per page (defaults to 10)
     * @param {String} opts.createdAtFrom Start date to filter recipients by created_at range Allows filtering results by the specified `created_at` timeframe.  Example: `/v1/recipients?created_at_from=2018-06-06&created_at_to=2018-06-08`
     * @param {String} opts.createdAtTo End date to filter recipients by created_at range Allows filtering results by the specified `created_at` timeframe.  Example: `/v1/recipients?created_at_from=2018-06-06&created_at_to=2018-06-08`
     * @param {String} opts.externalId Allows filtering results by `external_id`.  Example: `/v1/senders?external_id=26ec8517-2f0d-48c0-b74f-0bccb9ab3a87`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/SenderListResponse} and HTTP response
     */ }, { key: "getSendersWithHttpInfo", value:
    function getSendersWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per': opts['per'],
        'created_at_from': opts['createdAtFrom'],
        'created_at_to': opts['createdAtTo'],
        'external_id': opts['externalId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _SenderListResponse["default"];
      return this.apiClient.callApi(
        '/senders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Listing senders
     * Get a list of available senders
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page number to request (defaults to 1)
     * @param {Number} opts.per The number of results to load per page (defaults to 10)
     * @param {String} opts.createdAtFrom Start date to filter recipients by created_at range Allows filtering results by the specified `created_at` timeframe.  Example: `/v1/recipients?created_at_from=2018-06-06&created_at_to=2018-06-08`
     * @param {String} opts.createdAtTo End date to filter recipients by created_at range Allows filtering results by the specified `created_at` timeframe.  Example: `/v1/recipients?created_at_from=2018-06-06&created_at_to=2018-06-08`
     * @param {String} opts.externalId Allows filtering results by `external_id`.  Example: `/v1/senders?external_id=26ec8517-2f0d-48c0-b74f-0bccb9ab3a87`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/SenderListResponse}
     */ }, { key: "getSenders", value:
    function getSenders(opts) {
      return this.getSendersWithHttpInfo(opts).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    }


    /**
     * Updating a sender
     * Updates a single sender by the Sender ID
     * @param {String} senderID ID of the sender to get.  Example: `/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670`
     * @param {module:Model/SenderRequest} senderRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/SenderResponse} and HTTP response
     */ }, { key: "patchSenderWithHttpInfo", value:
    function patchSenderWithHttpInfo(senderID, senderRequest) {
      var postBody = senderRequest;
      // verify the required parameter 'senderID' is set
      if (senderID === undefined || senderID === null) {
        throw new Error("Missing the required parameter 'senderID' when calling patchSender");
      }
      // verify the required parameter 'senderRequest' is set
      if (senderRequest === undefined || senderRequest === null) {
        throw new Error("Missing the required parameter 'senderRequest' when calling patchSender");
      }

      var pathParams = {
        'Sender ID': senderID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SenderResponse["default"];
      return this.apiClient.callApi(
        '/senders/{Sender ID}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Updating a sender
     * Updates a single sender by the Sender ID
     * @param {String} senderID ID of the sender to get.  Example: `/v1/senders/bf9ff782-e182-45ac-abea-5bce83ad6670`
     * @param {module:Model/SenderRequest} senderRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/SenderResponse}
     */ }, { key: "patchSender", value:
    function patchSender(senderID, senderRequest) {
      return this.patchSenderWithHttpInfo(senderID, senderRequest).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    }


    /**
     * Creating a sender
     * Creates a new sender in our system. 
     * @param {module:Model/SenderRequest} senderRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/SenderResponse} and HTTP response
     */ }, { key: "postSendersWithHttpInfo", value:
    function postSendersWithHttpInfo(senderRequest) {
      var postBody = senderRequest;
      // verify the required parameter 'senderRequest' is set
      if (senderRequest === undefined || senderRequest === null) {
        throw new Error("Missing the required parameter 'senderRequest' when calling postSenders");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _SenderResponse["default"];
      return this.apiClient.callApi(
        '/senders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creating a sender
     * Creates a new sender in our system. 
     * @param {module:Model/SenderRequest} senderRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/SenderResponse}
     */ }, { key: "postSenders", value:
    function postSenders(senderRequest) {
      return this.postSendersWithHttpInfo(senderRequest).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    } }]);}();
//# sourceMappingURL=SendersApi.js.map