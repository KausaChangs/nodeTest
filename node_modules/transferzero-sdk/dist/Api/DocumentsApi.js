"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = void 0;













var _ApiClient = _interopRequireDefault(require("../ApiClient"));
var _DocumentListResponse = _interopRequireDefault(require("../Model/DocumentListResponse"));
var _DocumentRequest = _interopRequireDefault(require("../Model/DocumentRequest"));
var _DocumentResponse = _interopRequireDefault(require("../Model/DocumentResponse"));function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };}function _typeof(o) {"@babel/helpers - typeof";return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {return typeof o;} : function (o) {return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;}, _typeof(o);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);Object.defineProperty(Constructor, "prototype", { writable: false });return Constructor;}function _toPropertyKey(t) {var i = _toPrimitive(t, "string");return "symbol" == _typeof(i) ? i : i + "";}function _toPrimitive(t, r) {if ("object" != _typeof(t) || !t) return t;var e = t[Symbol.toPrimitive];if (void 0 !== e) {var i = e.call(t, r || "default");if ("object" != _typeof(i)) return i;throw new TypeError("@@toPrimitive must return a primitive value.");}return ("string" === r ? String : Number)(t);} /**
 * TransferZero API
 * Reference documentation for the TransferZero API V1
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */ /**
* Documents service.
* @module Api/DocumentsApi
* @version 1.35.1
*/var DocumentsApi = exports["default"] = /*#__PURE__*/function () {/**
  * Constructs a new DocumentsApi. 
  * @alias module:Api/DocumentsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */function DocumentsApi(apiClient) {_classCallCheck(this, DocumentsApi);this.apiClient = apiClient || _ApiClient["default"].instance;}
  /**
   * Fetching a document
   * Returns a single document by the Documents ID
   * @param {String} documentID ID of the document to get.  Example: `/v1/documents/bf9ff782-e182-45ac-abea-5bce83ad6670`
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/DocumentResponse} and HTTP response
   */return _createClass(DocumentsApi, [{ key: "getDocumentWithHttpInfo", value:
    function getDocumentWithHttpInfo(documentID) {
      var postBody = null;
      // verify the required parameter 'documentID' is set
      if (documentID === undefined || documentID === null) {
        throw new Error("Missing the required parameter 'documentID' when calling getDocument");
      }

      var pathParams = {
        'Document ID': documentID
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _DocumentResponse["default"];
      return this.apiClient.callApi(
        '/documents/{Document ID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Fetching a document
     * Returns a single document by the Documents ID
     * @param {String} documentID ID of the document to get.  Example: `/v1/documents/bf9ff782-e182-45ac-abea-5bce83ad6670`
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/DocumentResponse}
     */ }, { key: "getDocument", value:
    function getDocument(documentID) {
      return this.getDocumentWithHttpInfo(documentID).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    }


    /**
     * Getting a list of documents
     * Fetches a list of documents.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page number to request (defaults to 1)
     * @param {Number} opts.per The number of results to load per page (defaults to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/DocumentListResponse} and HTTP response
     */ }, { key: "getDocumentsWithHttpInfo", value:
    function getDocumentsWithHttpInfo(opts) {
      opts = opts || {};
      var postBody = null;

      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'per': opts['per']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = _DocumentListResponse["default"];
      return this.apiClient.callApi(
        '/documents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Getting a list of documents
     * Fetches a list of documents.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page number to request (defaults to 1)
     * @param {Number} opts.per The number of results to load per page (defaults to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/DocumentListResponse}
     */ }, { key: "getDocuments", value:
    function getDocuments(opts) {
      return this.getDocumentsWithHttpInfo(opts).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    }


    /**
     * Creating a document
     * Creates a new document
     * @param {module:Model/DocumentRequest} documentRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/DocumentResponse} and HTTP response
     */ }, { key: "postDocumentsWithHttpInfo", value:
    function postDocumentsWithHttpInfo(documentRequest) {
      var postBody = documentRequest;
      // verify the required parameter 'documentRequest' is set
      if (documentRequest === undefined || documentRequest === null) {
        throw new Error("Missing the required parameter 'documentRequest' when calling postDocuments");
      }

      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['AuthorizationKey', 'AuthorizationNonce', 'AuthorizationSecret', 'AuthorizationSignature'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = _DocumentResponse["default"];
      return this.apiClient.callApi(
        '/documents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creating a document
     * Creates a new document
     * @param {module:Model/DocumentRequest} documentRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/DocumentResponse}
     */ }, { key: "postDocuments", value:
    function postDocuments(documentRequest) {
      return this.postDocumentsWithHttpInfo(documentRequest).
      then(function (response_and_data) {
        return response_and_data.data;
      });
    } }]);}();
//# sourceMappingURL=DocumentsApi.js.map