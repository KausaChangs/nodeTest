{"version":3,"file":"ApiClient.js","names":["_crypto","_interopRequireDefault","require","_querystring","_superagent","_v","obj","__esModule","_defineProperty","key","value","_toPropertyKey","Object","defineProperty","enumerable","configurable","writable","_typeof","o","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","_createClass","protoProps","staticProps","t","_toPrimitive","r","e","toPrimitive","call","String","Number","ApiError","error","responseObject","response","isValidationError","getCode","status","getResponseObject","ApiClient","exports","config","arguments","undefined","basePath","apiKey","apiSecret","defaultHeaders","timeout","cache","enableCookies","window","agent","superagent","requestAgent","paramToString","param","Date","toJSON","toString","buildUrl","path","pathParams","_this","match","url","replace","fullMatch","hasOwnProperty","encodeURIComponent","isJsonMime","contentType","Boolean","jsonPreferredMime","contentTypes","isFileParam","fs","err","ReadStream","Buffer","Blob","File","normalizeParams","params","newParams","Array","isArray","buildCollectionParam","collectionFormat","map","join","Error","applyAuthToRequest","request","bodyParam","nonce","uuid","bodyJson","JSON","stringify","hash","crypto","createHash","update","query","keys","qs","querystring","toSign","method","digest","signature","signRequest","set","validateRequest","headers","headerSignature","deserialize","returnType","data","body","text","convertToType","parseResponseString","responseString","parse","callApi","httpMethod","queryParams","headerParams","formParams","authNames","accepts","_this2","toUpperCase","getTime","type","header","send","_formParams","attach","field","accept","responseType","_attachCookies","withCredentials","Promise","resolve","reject","end","apiError","_saveCookies","paramToSign","secret","hmac","createHmac","parseDate","str","parseInt","parseFloat","constructFromObject","itemType","item","keyType","valueType","k","result","CSV","SSV","TSV","PIPES","MULTI"],"sources":["../src/ApiClient.js"],"sourcesContent":["/**\n * TransferZero API\n * Reference documentation for the TransferZero API V1\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n *\n */\n\n\nimport crypto from 'crypto';\nimport querystring from 'querystring';\nimport superagent from 'superagent';\nimport uuid from 'uuid/v4';\n\nclass ApiError {\n  constructor(error, responseObject, response) {\n    this.error = error;\n    this.responseObject = responseObject;\n    this.response = response;\n    this.isValidationError = false;\n  }\n\n  getCode() {\n    return this.response.status;\n  }\n\n  getResponseObject() {\n    return this.responseObject;\n  }\n}\n\n/**\n* @module ApiClient\n* @version 1.35.1\n*/\n\n/**\n* Manages low level client-server communications, parameter marshalling, etc. There should not be any need for an\n* application to use this class directly - the *Api and model classes provide the public API for the service. The\n* contents of this file should be regarded as internal but are documented for completeness.\n* @alias module:ApiClient\n* @class\n* @param {Object} [config] Optional config object to specify base path, key, secret etc.\n*/\nexport default class ApiClient {\n    constructor(config = {\n      basePath: 'https://api-sandbox.transferzero.com/v1'\n    }) {\n        /**\n         * The base URL against which to resolve every API call's (relative) path.\n         * @type {String}\n         * @default https://api-sandbox.transferzero.com/v1\n         */\n        this.basePath = config.basePath;\n        this.apiKey = config.apiKey;\n        this.apiSecret = config.apiSecret;\n\n        /**\n         * The default HTTP headers to be included for all API calls.\n         * @type {Array.<String>}\n         * @default {}\n         */\n        this.defaultHeaders = {};\n\n        /**\n         * The default HTTP timeout for all API calls.\n         * @type {Number}\n         * @default 60000\n         */\n        this.timeout = 60000;\n\n        /**\n         * If set to false an additional timestamp parameter is added to all API GET calls to\n         * prevent browser caching\n         * @type {Boolean}\n         * @default true\n         */\n        this.cache = true;\n\n        /**\n         * If set to true, the client will save the cookies from each server\n         * response, and return them in the next request.\n         * @default false\n         */\n        this.enableCookies = false;\n\n        /*\n         * Used to save and return cookies in a node.js (non-browser) setting,\n         * if this.enableCookies is set to true.\n         */\n        if (typeof window === 'undefined') {\n          this.agent = new superagent.agent();\n        }\n\n        /*\n         * Allow user to override superagent agent\n         */\n         this.requestAgent = null;\n\n    }\n\n    /**\n    * Returns a string representation for an actual parameter.\n    * @param param The actual parameter.\n    * @returns {String} The string representation of <code>param</code>.\n    */\n    paramToString(param) {\n        if (param == undefined || param == null) {\n            return '';\n        }\n        if (param instanceof Date) {\n            return param.toJSON();\n        }\n\n        return param.toString();\n    }\n\n    /**\n    * Builds full URL by appending the given path to the base URL and replacing path parameter place-holders with parameter values.\n    * NOTE: query parameters are not handled here.\n    * @param {String} path The path to append to the base URL.\n    * @param {Object} pathParams The parameter values to append.\n    * @returns {String} The encoded path with parameter values substituted.\n    */\n    buildUrl(path, pathParams) {\n        if (!path.match(/^\\//)) {\n            path = '/' + path;\n        }\n\n        var url = this.basePath + path;\n        url = url.replace(/\\{([\\w- ]+)\\}/g, (fullMatch, key) => {\n            var value;\n            if (pathParams.hasOwnProperty(key)) {\n                value = this.paramToString(pathParams[key]);\n            } else {\n                value = fullMatch;\n            }\n\n            return encodeURIComponent(value);\n        });\n\n        return url;\n    }\n\n    /**\n    * Checks whether the given content type represents JSON.<br>\n    * JSON content type examples:<br>\n    * <ul>\n    * <li>application/json</li>\n    * <li>application/json; charset=UTF8</li>\n    * <li>APPLICATION/JSON</li>\n    * </ul>\n    * @param {String} contentType The MIME content type to check.\n    * @returns {Boolean} <code>true</code> if <code>contentType</code> represents JSON, otherwise <code>false</code>.\n    */\n    isJsonMime(contentType) {\n        return Boolean(contentType != null && contentType.match(/^application\\/json(;.*)?$/i));\n    }\n\n    /**\n    * Chooses a content type from the given array, with JSON preferred; i.e. return JSON if included, otherwise return the first.\n    * @param {Array.<String>} contentTypes\n    * @returns {String} The chosen content type, preferring JSON.\n    */\n    jsonPreferredMime(contentTypes) {\n        for (var i = 0; i < contentTypes.length; i++) {\n            if (this.isJsonMime(contentTypes[i])) {\n                return contentTypes[i];\n            }\n        }\n\n        return contentTypes[0];\n    }\n\n    /**\n    * Checks whether the given parameter value represents file-like content.\n    * @param param The parameter to check.\n    * @returns {Boolean} <code>true</code> if <code>param</code> represents a file.\n    */\n    isFileParam(param) {\n        // fs.ReadStream in Node.js and Electron (but not in runtime like browserify)\n        if (typeof require === 'function') {\n            let fs;\n            try {\n                fs = require('fs');\n            } catch (err) {}\n            if (fs && fs.ReadStream && param instanceof fs.ReadStream) {\n                return true;\n            }\n        }\n\n        // Buffer in Node.js\n        if (typeof Buffer === 'function' && param instanceof Buffer) {\n            return true;\n        }\n\n        // Blob in browser\n        if (typeof Blob === 'function' && param instanceof Blob) {\n            return true;\n        }\n\n        // File in browser (it seems File object is also instance of Blob, but keep this for safe)\n        if (typeof File === 'function' && param instanceof File) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n    * Normalizes parameter values:\n    * <ul>\n    * <li>remove nils</li>\n    * <li>keep files and arrays</li>\n    * <li>format to string with `paramToString` for other cases</li>\n    * </ul>\n    * @param {Object.<String, Object>} params The parameters as object properties.\n    * @returns {Object.<String, Object>} normalized parameters.\n    */\n    normalizeParams(params) {\n        var newParams = {};\n        for (var key in params) {\n            if (params.hasOwnProperty(key) && params[key] != undefined && params[key] != null) {\n                var value = params[key];\n                if (this.isFileParam(value) || Array.isArray(value)) {\n                    newParams[key] = value;\n                } else {\n                    newParams[key] = this.paramToString(value);\n                }\n            }\n        }\n\n        return newParams;\n    }\n\n    /**\n    * Enumeration of collection format separator strategies.\n    * @enum {String}\n    * @readonly\n    */\n    static CollectionFormatEnum = {\n        /**\n         * Comma-separated values. Value: <code>csv</code>\n         * @const\n         */\n        CSV: ',',\n\n        /**\n         * Space-separated values. Value: <code>ssv</code>\n         * @const\n         */\n        SSV: ' ',\n\n        /**\n         * Tab-separated values. Value: <code>tsv</code>\n         * @const\n         */\n        TSV: '\\t',\n\n        /**\n         * Pipe(|)-separated values. Value: <code>pipes</code>\n         * @const\n         */\n        PIPES: '|',\n\n        /**\n         * Native array. Value: <code>multi</code>\n         * @const\n         */\n        MULTI: 'multi'\n    };\n\n    /**\n    * Builds a string representation of an array-type actual parameter, according to the given collection format.\n    * @param {Array} param An array parameter.\n    * @param {module:ApiClient.CollectionFormatEnum} collectionFormat The array element separator strategy.\n    * @returns {String|Array} A string representation of the supplied collection, using the specified delimiter. Returns\n    * <code>param</code> as is if <code>collectionFormat</code> is <code>multi</code>.\n    */\n    buildCollectionParam(param, collectionFormat) {\n        if (param == null) {\n            return null;\n        }\n        switch (collectionFormat) {\n            case 'csv':\n                return param.map(this.paramToString).join(',');\n            case 'ssv':\n                return param.map(this.paramToString).join(' ');\n            case 'tsv':\n                return param.map(this.paramToString).join('\\t');\n            case 'pipes':\n                return param.map(this.paramToString).join('|');\n            case 'multi':\n                //return the array directly as SuperAgent will handle it as expected\n                return param.map(this.paramToString);\n            default:\n                throw new Error('Unknown collection format: ' + collectionFormat);\n        }\n    }\n\n    /**\n    * Applies authentication headers to the request.\n    * @param {Object} request The request object created by a <code>superagent()</code> call.\n    * @param {Object} bodyParam The value to pass as the request body.\n    */\n    applyAuthToRequest(request, bodyParam) {\n        if (!this.apiKey || !this.apiSecret) {\n            throw 'Please set the API key and secret on the ApiClient';\n        }\n        const nonce = uuid();\n        const bodyJson = bodyParam ? JSON.stringify(bodyParam) : '';\n        const hash = crypto.createHash('sha512').update(bodyJson);\n        var query = ''\n\n        if (Object.keys(request.qs).length !== 0) {\n          query = '?' + querystring.stringify(request.qs)\n        }\n\n        const toSign = [\n            nonce,\n            request.method,\n            request.url + query,\n            hash.digest('hex')\n        ].join('&');\n\n        const signature = ApiClient.signRequest(toSign, this.apiSecret)\n        request.set({\n            'Authorization-Key': this.apiKey,\n            'Authorization-Nonce': nonce,\n            'Authorization-Signature': signature\n        });\n        return request;\n    }\n\n    /**\n    * Use the Authorization Signature in the request headers to validate the payload\n    * @param {String} request url\n    * @param {String} bodyJson, string of the request body\n    * @param {Object} headers containing the nonce, signature and key used for authorization\n    * @return boolean\n    */\n    validateRequest(url, bodyJson, headers) {\n        const nonce = headers[\"Authorization-Nonce\"];\n        const signature = headers[\"Authorization-Signature\"]\n        const key = headers[\"Authorization-Key\"]\n        if (nonce == null || signature == null || key !== this.apiKey) {\n            return false;\n        }\n\n        const hash = crypto.createHash('sha512').update(bodyJson);\n\n        const toSign = [\n            nonce,\n            'POST',\n            url,\n            hash.digest('hex')\n        ].join('&');\n\n        const headerSignature = ApiClient.signRequest(toSign, this.apiSecret)\n\n        return (headerSignature === signature)\n    }\n\n    /**\n    * Sign request using HMAC-SHA512 algorithm.\n    * @param {String} paramToSign containing the nonce, request method, url and the hex digest of the request body\n    * @param {String} api secret\n    * @returns Authorization Signature\n    */\n    static signRequest(paramToSign, secret) {\n        const hmac = crypto.createHmac('sha512', secret).update(paramToSign);\n        const signature = hmac.digest('hex');\n\n        return signature\n    }\n\n    /**\n    * Deserializes an HTTP response body into a value of the specified type.\n    * @param {Object} response A SuperAgent response object.\n    * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types\n    * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n    * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n    * all properties on <code>data<code> will be converted to this type.\n    * @returns A value of the specified type.\n    */\n    deserialize(response, returnType) {\n        if (response == null || returnType == null || response.status == 204) {\n            return null;\n        }\n\n        // Rely on SuperAgent for parsing response body.\n        // See http://visionmedia.github.io/superagent/#parsing-response-bodies\n        var data = response.body;\n        if (data == null || (typeof data === 'object' && typeof data.length === 'undefined' && !Object.keys(data).length)) {\n            // SuperAgent does not always produce a body; use the unparsed response as a fallback\n            data = response.text;\n        }\n\n        return ApiClient.convertToType(data, returnType);\n    }\n\n    /**\n    * Parses and deserializes a response in string format.\n    * Can be used to parse webhook responses that were already converted to strings\n    *\n    * @param {String} responseString The string we wish to parse\n    * @param {(String|Array.<String>|Object.<String, Object>|Function)} returnType The type to return. Pass a string for simple types\n    * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n    * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n    * all properties on <code>data<code> will be converted to this type.\n    * @returns A value of the specified type.\n    */\n    parseResponseString(responseString, returnType) {\n        if (\n            responseString === null ||\n            returnType === null ||\n            responseString === ''\n        ) {\n            return null;\n        }\n        const responseObject = JSON.parse(responseString);\n        return ApiClient.convertToType(responseObject, returnType);\n    }\n\n    \n\n    /**\n    * Invokes the REST service using the supplied settings and parameters.\n    * @param {String} path The base URL to invoke.\n    * @param {String} httpMethod The HTTP method to use.\n    * @param {Object.<String, String>} pathParams A map of path parameters and their values.\n    * @param {Object.<String, Object>} queryParams A map of query parameters and their values.\n    * @param {Object.<String, Object>} headerParams A map of header parameters and their values.\n    * @param {Object.<String, Object>} formParams A map of form parameters and their values.\n    * @param {Object} bodyParam The value to pass as the request body.\n    * @param {Array.<String>} authNames An array of authentication type names.\n    * @param {Array.<String>} contentTypes An array of request MIME types.\n    * @param {Array.<String>} accepts An array of acceptable response MIME types.\n    * @param {(String|Array|ObjectFunction)} returnType The required type to return; can be a string for simple types or the\n    * constructor for a complex type.\n    * @returns {Promise} A {@link https://www.promisejs.org/|Promise} object.\n    */\n    callApi(path, httpMethod, pathParams,\n        queryParams, headerParams, formParams, bodyParam, authNames, contentTypes, accepts,\n        returnType) {\n      var url = this.buildUrl(path, pathParams);\n      var request = superagent(httpMethod, url);\n\n      // set query parameters\n      if (httpMethod.toUpperCase() === 'GET' && this.cache === false) {\n        queryParams['_'] = new Date().getTime();\n      }\n\n      request.query(this.normalizeParams(queryParams));\n\n      // set header parameters\n      request.set(this.defaultHeaders).set(this.normalizeParams(headerParams));\n\n      request.set(\"User-Agent\",\"TransferZero-SDK/JavaScript/1.35.1\");\n\n      // set requestAgent if it is set by user\n      if (this.requestAgent) {\n        request.agent(this.requestAgent);\n      }\n\n      // set request timeout\n      request.timeout(this.timeout);\n\n      // apply authentications\n      request = this.applyAuthToRequest(request, bodyParam);\n\n      var contentType = this.jsonPreferredMime(contentTypes);\n      if (contentType) {\n        // Issue with superagent and multipart/form-data (https://github.com/visionmedia/superagent/issues/746)\n        if (contentType != 'multipart/form-data') {\n          request.type(contentType);\n        }\n      } else if (!request.header['Content-Type']) {\n        request.type('application/json');\n      }\n\n      if (contentType === 'application/x-www-form-urlencoded') {\n        request.send(querystring.stringify(this.normalizeParams(formParams)));\n      } else if (contentType == 'multipart/form-data') {\n        var _formParams = this.normalizeParams(formParams);\n        for (var key in _formParams) {\n          if (_formParams.hasOwnProperty(key)) {\n            if (this.isFileParam(_formParams[key])) {\n              // file field\n              request.attach(key, _formParams[key]);\n            } else {\n              request.field(key, _formParams[key]);\n            }\n          }\n        }\n      } else if (bodyParam !== null && bodyParam !== undefined) {\n        request.send(bodyParam);\n      }\n\n      var accept = this.jsonPreferredMime(accepts);\n      if (accept) {\n        request.accept(accept);\n      }\n\n      if (returnType === 'Blob') {\n        request.responseType('blob');\n      } else if (returnType === 'String') {\n        request.responseType('string');\n      }\n\n      // Attach previously saved cookies, if enabled\n      if (this.enableCookies) {\n        if (typeof window === 'undefined') {\n          this.agent._attachCookies(request);\n        } else {\n          request.withCredentials();\n        }\n      }\n\n        return new Promise((resolve, reject) => {\n            request.end((error, response) => {\n                try {\n                    var data = this.deserialize(response, returnType);\n                    if (error) {\n                        const apiError = new ApiError(error, data, response);\n                        if (response && response.status === 422) {\n                            apiError.isValidationError = true;\n                        }\n                        reject(apiError);\n                    }\n                    if (this.enableCookies && typeof window === 'undefined') {\n                        this.agent._saveCookies(response);\n                    }\n\n                    resolve({ data, response });\n                } catch (err) {\n                    reject(err);\n                }\n            });\n        });\n\n        \n    }\n\n    /**\n    * Parses an ISO-8601 string representation of a date value.\n    * @param {String} str The date value as a string.\n    * @returns {Date} The parsed date object.\n    */\n    static parseDate(str) {\n        return new Date(str);\n    }\n\n    /**\n    * Converts a value to the specified type.\n    * @param {(String|Object)} data The data to convert, as a string or object.\n    * @param {(String|Array.<String>|Object.<String, Object>|Function)} type The type to return. Pass a string for simple types\n    * or the constructor function for a complex type. Pass an array containing the type name to return an array of that type. To\n    * return an object, pass an object with one property whose name is the key type and whose value is the corresponding value type:\n    * all properties on <code>data<code> will be converted to this type.\n    * @returns An instance of the specified type or null or undefined if data is null or undefined.\n    */\n    static convertToType(data, type) {\n        if (data === null || data === undefined)\n            return data\n\n        switch (type) {\n            case 'Boolean':\n                return Boolean(data);\n            case 'Integer':\n                return parseInt(data, 10);\n            case 'Number':\n                return parseFloat(data);\n            case 'String':\n                return String(data);\n            case 'Date':\n                return ApiClient.parseDate(String(data));\n            case 'Blob':\n                return data;\n            default:\n                if (type === Object) {\n                    // generic object, return directly\n                    return data;\n                } else if (typeof type === 'function') {\n                    // for model type like: User\n                    return type.constructFromObject(data);\n                } else if (Array.isArray(type)) {\n                    // for array type like: ['String']\n                    var itemType = type[0];\n\n                    return data.map((item) => {\n                        return ApiClient.convertToType(item, itemType);\n                    });\n                } else if (typeof type === 'object') {\n                    // for plain object type like: {'String': 'Integer'}\n                    var keyType, valueType;\n                    for (var k in type) {\n                        if (type.hasOwnProperty(k)) {\n                            keyType = k;\n                            valueType = type[k];\n                            break;\n                        }\n                    }\n\n                    var result = {};\n                    for (var k in data) {\n                        if (data.hasOwnProperty(k)) {\n                            var key = ApiClient.convertToType(k, keyType);\n                            var value = ApiClient.convertToType(data[k], valueType);\n                            result[key] = value;\n                        }\n                    }\n\n                    return result;\n                } else {\n                    // for unknown type, return the data directly\n                    return data;\n                }\n        }\n    }\n\n    /**\n    * Constructs a new map or array model from REST data.\n    * @param data {Object|Array} The REST data.\n    * @param obj {Object|Array} The target object or array.\n    */\n    static constructFromObject(data, obj, itemType) {\n        if (Array.isArray(data)) {\n            for (var i = 0; i < data.length; i++) {\n                if (data.hasOwnProperty(i))\n                    obj[i] = ApiClient.convertToType(data[i], itemType);\n            }\n        } else {\n            for (var k in data) {\n                if (data.hasOwnProperty(k))\n                    obj[k] = ApiClient.convertToType(data[k], itemType);\n            }\n        }\n    };\n}\n\n/**\n* The default API client implementation.\n* @type {module:ApiClient}\n*/\nApiClient.instance = new ApiClient();\n"],"mappings":"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","ignoreList":[]}