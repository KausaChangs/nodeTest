{"version":3,"file":"PayoutMethod.js","names":["_ApiClient","_interopRequireDefault","require","_FieldDescription","_PayoutMethodDetails","_ValidationErrorDescription","obj","__esModule","_typeof","o","Symbol","iterator","constructor","prototype","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_createClass","protoProps","staticProps","t","_toPrimitive","r","e","toPrimitive","call","String","Number","PayoutMethod","initialize","value","constructFromObject","data","hasOwnProperty","ApiClient","convertToType","PayoutMethodDetails","ValidationErrorDescription","FieldDescription","undefined","_default","exports"],"sources":["../../src/Model/PayoutMethod.js"],"sourcesContent":["/**\n * TransferZero API\n * Reference documentation for the TransferZero API V1\n *\n * The version of the OpenAPI document: 1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n *\n */\n\nimport ApiClient from '../ApiClient';\nimport FieldDescription from './FieldDescription';\nimport PayoutMethodDetails from './PayoutMethodDetails';\nimport ValidationErrorDescription from './ValidationErrorDescription';\n\n/**\n * The PayoutMethod model module.\n * @module Model/PayoutMethod\n * @version 1.35.1\n */\nclass PayoutMethod {\n    /**\n     * Constructs a new <code>PayoutMethod</code>.\n     * This describes the specific details on how the payment has to be routed to the recipient.\n     * @alias module:Model/PayoutMethod\n     */\n    constructor() { \n        \n        PayoutMethod.initialize(this);\n    }\n\n    /**\n     * Initializes the fields of this object.\n     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).\n     * Only for internal use.\n     */\n    static initialize(obj) { \n    }\n\n    /**\n     * Constructs a <code>PayoutMethod</code> from a plain JavaScript object, optionally creating a new instance.\n     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.\n     * @param {Object} data The plain JavaScript object bearing properties of interest.\n     * @param {module:Model/PayoutMethod} obj Optional instance to populate.\n     * @return {module:Model/PayoutMethod} The populated <code>PayoutMethod</code> instance.\n     */\n    static constructFromObject(data, obj) {\n        if (data) {\n            obj = obj || new PayoutMethod();\n\n            if (data.hasOwnProperty('type')) {\n                obj['type'] = ApiClient.convertToType(data['type'], 'String');\n            }\n            if (data.hasOwnProperty('details')) {\n                obj['details'] = PayoutMethodDetails.constructFromObject(data['details']);\n            }\n            if (data.hasOwnProperty('metadata')) {\n                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);\n            }\n            if (data.hasOwnProperty('id')) {\n                obj['id'] = ApiClient.convertToType(data['id'], 'String');\n            }\n            if (data.hasOwnProperty('errors')) {\n                obj['errors'] = ApiClient.convertToType(data['errors'], {'String': [ValidationErrorDescription]});\n            }\n            if (data.hasOwnProperty('fields')) {\n                obj['fields'] = ApiClient.convertToType(data['fields'], {'String': FieldDescription});\n            }\n        }\n        return obj;\n    }\n\n\n}\n\n/**\n * Contains the currency to send the money to, and the type of the money movement  Commonly used payout types are:  - `NGN::Bank` - for Nigerian bank account payments. - `GHS::Bank` - for Ghanaian bank account payments. - `GHS::Mobile` - for Ghanaian mobile money payments. - `GHS::Cash` - for Ghanaian cash remittance payments. - `UGX::Mobile` - for Ugandan mobile money payments. - `XOF::Mobile` - for mobile money payments to West-Africa. - `XOF::Bank` - for Senegalese bank account payments. - `XOF::Cash` - for Senegalese cash remittance payments. - `MAD::Cash` - for Moroccan cash remittance payments. - `EUR::Bank` - for IBAN bank transfers in EUR. - `GBP::Bank` - for IBAN bank and FP accounts transfers in GBP. - `ZAR::Bank` - for South Africa bank account payments. - `USD::Bank` - for USD account payments. *** Currently for Egypt, Nigeria and United States only and in Beta phase *** - `USD::Cash` - for USD cash remittance payments. *** Currently for Nigeria only and in Beta phase *** - `KES::Bank` - for Kenyan bank account payments. - `KES::Mobile` - for Kenyan mobile money payments. - `XAF::Mobile` - for mobile money payments to Central African (CEMAC) countries. *** Currently in Beta phase *** - `XAF::Bank` - for Cameroon bank account payments. - `GNF::Mobile` - for mobile money payments to Guinea. - `BRL::Bank` - for Brazilian bank account payments. - `NZD::Bank` - for New Zealand bank account payments. - `INR::Bank` - for Indian bank account payments. - `BWP::Bank` - for Botswana bank account payments. - `ZMW::Bank` - for Zambian bank account payments. - `CAD::Bank` - for Canadian bank account payments. - `UGX::Bank` - for Ugandan bank account payments. - `EGP::Bank` - for Egyptian bank account payments.  You can also send funds to the internal balance using `CCY::Balance`, where `CCY` is the appropriate currency. See [Collection from senders](https://docs.transferzero.com/docs/additional-features/#collections-from-senders) for more info on how to collect money into internal balance \n * @member {String} type\n */\nPayoutMethod.prototype['type'] = undefined;\n\n/**\n * @member {module:Model/PayoutMethodDetails} details\n */\nPayoutMethod.prototype['details'] = undefined;\n\n/**\n * Metadata of payout method. You can store any kind of information in this field.\n * @member {Object} metadata\n */\nPayoutMethod.prototype['metadata'] = undefined;\n\n/**\n * @member {String} id\n */\nPayoutMethod.prototype['id'] = undefined;\n\n/**\n * The fields that have some problems and don't pass validation\n * @member {Object.<String, Array.<module:Model/ValidationErrorDescription>>} errors\n */\nPayoutMethod.prototype['errors'] = undefined;\n\n/**\n * The fields needed for payments with this payment method with details on validation requirements\n * @member {Object.<String, module:Model/FieldDescription>} fields\n */\nPayoutMethod.prototype['fields'] = undefined;\n\n\n\n\n\n\nexport default PayoutMethod;\n\n"],"mappings":"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","ignoreList":[]}